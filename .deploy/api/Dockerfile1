ARG NODE_ENV
ARG PORT
ARG APP_URL
ARG CLIENT_URL
ARG TYPEORM_HOST
ARG TYPEORM_PORT
ARG TYPEORM_DATABASE
ARG TYPEORM_USERNAME-
ARG TYPEORM_PASSWORD
ARG REDIS_HOST
ARG REDIS_PORT
ARG REDIS_DATABASE
ARG EMAIL_HOST
ARG EMAIL_PORT
ARG EMAIL_FROM
ARG EMAIL_USERNAME
ARG EMAIL_PASSWORD
ARG IS_DEMO
ARG SALT_ROUNDS

FROM node:18.15.0-alpine3.16 As dependencies

LABEL maintainer="admin@everbyte.co"
LABEL org.opencontainers.image.source https://github.com/elijah-onchwari/everbyte

ENV CI=true

RUN apk add --no-cache --virtual .gyp python3 make g++ dos2unix \
    && npm i --location=global npm \
    && npm install yarn -g --force \
    && npm install --location=global @nestjs/cli --force \
    && mkdir /srv/everbyte && chown -R node:node /srv/everbyte


COPY wait .deploy/api/entrypoint.prod.sh .deploy/api/entrypoint.compose.sh /
RUN chmod +x /wait /entrypoint.compose.sh /entrypoint.prod.sh && dos2unix /entrypoint.prod.sh && dos2unix /entrypoint.compose.sh

USER node:node

WORKDIR /srv/everbyte

COPY --chown=node:node apps/api/package.json ./apps/api/

COPY --chown=node:node packages/common/package.json ./packages/common/
COPY --chown=node:node packages/config/package.json ./packages/config/
COPY --chown=node:node packages/contracts/package.json ./packages/contracts/
COPY --chown=node:node packages/core/package.json ./packages/core/
COPY --chown=node:node packages/everflow/package.json ./packages/everflow/

COPY --chown=node:node decorate-angular-cli.js lerna.json package.json yarn.lock ./


RUN yarn install --frozen-lockfile --production && yarn cache clean

FROM node:18.15.0-alpine3.16 As build

USER node:node

WORKDIR /srv/everbyte

COPY --chown=node:node --from=dependencies /srv/everbyte .


COPY --chown=node:node dist ./dist

FROM node:18.15.0-alpine3.16 As production

WORKDIR /srv/everbyte

COPY --chown=node:node --from=build /srv/everbyte ./

RUN npm install pm2 -g && \
	mkdir /import && chown node:node /import && \
	touch ormlogs.log && chown node:node ormlogs.log && chown node:node wait && \
	chmod +x wait entrypoint.compose.sh entrypoint.prod.sh && chown -R node:node apps/

USER node:node

ENV NODE_ENV=${NODE_ENV:-production}
ENV NEST_DEBUG=${NEST_DEBUG}
ENV PORT=${PORT:-3000}
ENV APP_URL=${APP_URL:-http://localhost:3000}
ENV CLIENT_URL=${CLIENT_URL:-http://localhost:4200}
ENV TYPEORM_HOST=${TYPEORM_HOST}
ENV TYPEORM_PORT=${TYPEORM_PORT}
ENV TYPEORM_DATABASE=${TYPEORM_DATABASE}
ENV TYPEORM_USERNAME=${TYPEORM_USERNAME}
ENV TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
ENV REDIS_HOST=${REDIS_HOST}
ENV REDIS_PORT=${REDIS_PORT}
ENV REDIS_DATABASE=${REDIS_DATABASE}
ENV EMAIL_HOST=${EMAIL_HOST}
ENV EMAIL_PORT=${EMAIL_PORT}
ENV EMAIL_FROM=${EMAIL_FROM}
ENV EMAIL_USERNAME=${EMAIL_USERNAME}
ENV EMAIL_PASSWORD=${EMAIL_PASSWORD}
ENV IS_DEMO=${IS_DEMO}
ENV SALT_ROUNDS=${SALT_ROUNDS}


EXPOSE ${PORT}

ENTRYPOINT [ "./entrypoint.prod.sh" ]

# Start the server using the production build
CMD [ "pm2-runtime", "main.js" ]